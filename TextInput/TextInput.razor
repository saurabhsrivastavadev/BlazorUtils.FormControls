@using Microsoft.Extensions.Logging
@using System.Timers;
@using Typeahead;
@using System.Web

@inject ILogger<Typeahead> Logger

<div class="bg-gray-100 p-4 rounded-xl">

    @if (!string.IsNullOrEmpty(Label))
    {
        <div id="labelForInput" class="flex justify-left mb-1 ml-1 text-xs cursor-default">
            @Label
        </div>
    }

    <div id="inputWithIcon" class="flex border-2 border-gray-400 rounded items-center">

        <input class="text-left text-sm w-full rounded p-2 focus:border-none"
               type="text"
               placeholder="@Placeholder"
               @onkeyup="HandleKeyUp"
               @onfocusin='_ => _focusInInput = true'
               @onfocusout='async _ => {await Task.Delay(50); _focusInInput = false;}'
               @bind="Value"
               @bind:event="oninput" />

        @if (!string.IsNullOrWhiteSpace(DescriptionPopupText))
        {
            <div tabindex="-1" 
                @onmouseover="_ => ShowDescriptionPopup = true"
                @onmouseout="_ => ShowDescriptionPopup = false">

                <!-- Question Mark -->
                <svg xmlns="http://www.w3.org/2000/svg"
                 class="h-4 w-4 mx-2 cursor-default" fill="currentColor" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M4.475 5.458c-.284 0-.514-.237-.47-.517C4.28 3.24 5.576 2 7.825 2c2.25 0 3.767 1.36 3.767 3.215 0 1.344-.665 2.288-1.79 2.973-1.1.659-1.414 1.118-1.414 2.01v.03a.5.5 0 0 1-.5.5h-.77a.5.5 0 0 1-.5-.495l-.003-.2c-.043-1.221.477-2.001 1.645-2.712 1.03-.632 1.397-1.135 1.397-2.028 0-.979-.758-1.698-1.926-1.698-1.009 0-1.71.529-1.938 1.402-.066.254-.278.461-.54.461h-.777ZM7.496 14c.622 0 1.095-.474 1.095-1.09 0-.618-.473-1.092-1.095-1.092-.606 0-1.087.474-1.087 1.091S6.89 14 7.496 14Z" />
                </svg>
            </div>
        }

    </div>

    <div id="descriptionPopup" class="relative flex flex-col items-end">

        @if (ShowDescriptionPopup)
        {
            <div class="absolute z-10 mt-1 w-max bg-white shadow-lg max-h-56
                        rounded-md py-1 text-base ring-1 ring-black ring-opacity-5
                        overflow-auto focus:outline-none sm:text-sm border-2 border-green-800"
                tabindex="-1">

                <p class="text-xs p-1 px-2">@((MarkupString)DescriptionPopupText)</p>
            </div>
        }
    </div>

</div>

@code {

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public string Value { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string DescriptionPopupText { get; set; }

    private bool ShowDescriptionPopup { get; set; }

    private bool _focusInInput = false;

    private string _lastValue = string.Empty;
    private Timer _debounceTimer = new Timer(500);

    protected override Task OnInitializedAsync()
    {
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += DebounceTimerCb;

        return base.OnInitializedAsync();
    }

    private void HandleKeyUp(KeyboardEventArgs args)
    {
        _debounceTimer.Stop();
        _debounceTimer.Start();
    }

    private void DebounceTimerCb(object sender, ElapsedEventArgs args)
    {
        // todo - run validations.

        ValueChanged.InvokeAsync(Value);

        _lastValue = Value;
    }
}