@using Microsoft.Extensions.Logging
@using System.Timers;

<div class="bg-gray-100 p-4 rounded-xl">

    <div class="flex flex-wrap justify-center mb-2">
        @if (ShowSelectedSuggestions)
        {
            @foreach (var value in _selectedValues)
            {
                <div class="flex bg-green-100 m-2 mb-0 p-2 rounded cursor-pointer 
                                space-x-2 border-2 border-gray-500 text-xs"
                 @onclick="_ => _selectedValues.Remove(value)">
                    <p>@value</p>
                    <svg xmlns="http://www.w3.org/2000/svg"
                     class="h-4 w-4 text-red-800 font-bold self-center"
                     fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </div>
            }
        }
    </div>

    <input class="text-center border-2 border-gray-600 w-full rounded p-2"
           type="text"
           placeholder="@Placeholder"
           @onkeyup="HandleKeyUp"
           @onfocusin='_ => _focusInInput = true'
           @onfocusout='async _ => {await Task.Delay(50); _focusInInput = false;}'
           @bind="CurrentValue"
           @bind:event="oninput" />

    @* Suggest values matching above text input *@
    <div class="relative">
        @if (CurrentValue.Length >= MinCharForSuggestions && 
                ShowSuggestions && _matchingSuggestions.Count > 0)
        {
            <ul class="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56
                        rounded-md py-1 text-base ring-1 ring-black ring-opacity-5
                        overflow-auto focus:outline-none sm:text-sm border-2 border-green-800"
                tabindex="-1" role="listbox"
                @onfocusin='_ => _focusInSuggestions = true'
                @onfocusout='_ => _focusInSuggestions = false'>

                @foreach (var suggestion in _matchingSuggestions)
                {
                    <li class="text-gray-900 cursor-default select-none relative py-2 pl-3 pr-9">

                        <div class="flex justify-center space-x-1 p-1 cursor-pointer"
                                @onclick='_ => {
                                    if (!_selectedValues.Contains(suggestion))
                                    {
                                        _selectedValues.Add(suggestion);
                                    }
                                    else
                                    {
                                        _selectedValues.Remove(suggestion);
                                    }
                                }'>
                            <div>@suggestion</div>
                            @if (_selectedValues.Contains(suggestion))
                            {
                                <svg xmlns="http://www.w3.org/2000/svg"
                                        class="h-4 w-4 text-red-800 font-bold self-center"
                                        fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
    </div>

    <button class="app-btn mt-2" @onclick="SubmitSelectedValues">@SubmitButtonText</button>

</div>

@code {

    [Inject]
    private ILogger<Typeahead> Logger { get; set; }

    [Parameter]
    public ISet<string> Suggestions { get; set; }

    [Parameter]
    public bool ShowSelectedSuggestions { get; set; } = true;

    [Parameter]
    public int MinCharForSuggestions { get; set; } = 2;

    [Parameter]
    public EventCallback<ISet<string>> SuggestionsChanged { get; set; }

    [Parameter]
    public bool AllowOnlySuggestedValues { get; set; } = false;

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string SubmitButtonText { get; set; } = "Submit the selected values";

    [Parameter]
    public EventCallback<ISet<string>> SubmitCallback { get; set; }

    [Parameter]
    public bool ClearSelectionOnSubmit { get; set; } = true;

    private string CurrentValue { get; set; } = string.Empty;

    private bool _focusInInput = false;
    private bool _focusInSuggestions = false;
    private bool _showSuggestions = true;
    private bool ShowSuggestions
    {
        get
        {
            Console.WriteLine($"_showSuggestions {_showSuggestions}, focusInInput {_focusInInput}, _focusInSuggestions {_focusInSuggestions}");
            return _showSuggestions && (_focusInInput || _focusInSuggestions);
        }

        set
        {
            _showSuggestions = value;
        }
    }

    private string _lastValue = string.Empty;
    private ISet<string> _matchingSuggestions = new HashSet<string>();
    private Timer _debounceTimer = new Timer(400);
    private ISet<string> _selectedValues = new HashSet<string>();

    protected override Task OnInitializedAsync()
    {
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += DebounceTimerCb;

        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        if (AllowOnlySuggestedValues && (Suggestions == null || Suggestions.Count == 0))
        {
            Logger.LogInformation("No suggestions in the typeahead component.");
        }

        if (Placeholder == string.Empty && Suggestions != null && Suggestions.Count > 0)
        {
            Placeholder = $"Type to select from {Suggestions.Count} values..";
        }

        return base.OnParametersSetAsync();
    }

    private void HandleKeyUp(KeyboardEventArgs args)
    {
        _debounceTimer.Stop();
        _debounceTimer.Start();

        if (args.Key == "Enter" && CurrentValue.Length >= MinCharForSuggestions && !AllowOnlySuggestedValues)
        {
            _selectedValues.Add(CurrentValue);
        }
        if (CurrentValue.Length > 1)
        {
            ShowSuggestions = true;
        }
        if (args.Key == "Escape")
        {
            ShowSuggestions = false;
        }
    }

    private void DebounceTimerCb(object sender, ElapsedEventArgs args)
    {
        if (CurrentValue.Length >= MinCharForSuggestions && CurrentValue != _lastValue)
        {
            _matchingSuggestions.Clear();
            _matchingSuggestions.UnionWith(Suggestions.Where(
                s => s.Contains(CurrentValue, StringComparison.OrdinalIgnoreCase)));
            StateHasChanged();
        }
        else if (CurrentValue != _lastValue)
        {
            _matchingSuggestions.Clear();
            StateHasChanged();
        }

        _lastValue = CurrentValue;
    }

    private void SubmitSelectedValues()
    {
        SubmitCallback.InvokeAsync(_selectedValues);

        if (ClearSelectionOnSubmit)
        {
            _selectedValues.Clear();
            CurrentValue = string.Empty;
        }
    }
}