@using Microsoft.Extensions.Logging
@using System.Timers;

<div class="bg-gray-100 p-4 rounded-xl">

    <div class="flex flex-wrap justify-center mb-2">
        @if (ShowSelectedSuggestions)
        {
            @foreach (var value in _selectedValues)
            {
                <div class="flex bg-green-100 m-2 mb-0 p-2 rounded cursor-pointer 
                                space-x-2 border-2 border-gray-500 text-xs"
                 @onclick="_ => _selectedValues.Remove(value)">
                    <p>@value</p>
                    <svg xmlns="http://www.w3.org/2000/svg"
                     class="h-4 w-4 text-red-800 font-bold self-center"
                     fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </div>
            }
            @foreach (var value in _newValues)
            {
                <div class="flex bg-green-100 m-2 mb-0 p-2 rounded cursor-pointer 
                                space-x-2 border-2 border-gray-500 text-xs"
                 @onclick="_ => _newValues.Remove(value)">
                    <p>@value</p>
                    <svg xmlns="http://www.w3.org/2000/svg"
                     class="h-4 w-4 text-red-800 font-bold self-center"
                     fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </div>
            }
        }
    </div>

    <div class="flex border-2 border-gray-400 rounded items-center">

        <input class="text-center w-full rounded p-2 focus:border-none"
            type="text"
            placeholder="@Placeholder"
            @onkeyup="HandleKeyUp"
            @onfocusin='_ => _focusInInput = true'
            @onfocusout='async _ => {await Task.Delay(50); _focusInInput = false;}'
            @bind="CurrentValue"
            @bind:event="oninput" />

        <div tabindex="-1"             
            @onfocusin='_ => _focusInArrow = true'
            @onfocusout='async _ => {await Task.Delay(50); _focusInArrow = false;}'>

            @if (ShowSuggestions && _matchingSuggestions.Count > 0)
            {
                <!-- Up Arrow -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mx-2 cursor-pointer" 
                     viewBox="0 0 20 20" fill="currentColor"
                     @onmouseup='_ => { ShowSuggestions = false; }'>
                    <path fill-rule="evenodd" d="M4.293 15.707a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414 0zm0-6a1 1 0 010-1.414l5-5a1 1 0 011.414 0l5 5a1 1 0 01-1.414 1.414L10 5.414 5.707 9.707a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
            } 
            else
            {
                <!-- Down Arrow -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mx-2 cursor-pointer" 
                     viewBox="0 0 20 20" fill="currentColor"
                     @onclick='_ => { 
                         ShowSuggestions = true; 
                         _matchingSuggestions.UnionWith(Suggestions);
                     }'>
                    <path fill-rule="evenodd" d="M15.707 4.293a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-5-5a1 1 0 011.414-1.414L10 8.586l4.293-4.293a1 1 0 011.414 0zm0 6a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-5-5a1 1 0 111.414-1.414L10 14.586l4.293-4.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
            }
        </div>

    </div>

    @* Suggest values matching above text input *@
    <div class="relative">
        @if (ShowSuggestions)
        {
            <ul class="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-56
                        rounded-md py-1 text-base ring-1 ring-black ring-opacity-5
                        overflow-auto focus:outline-none sm:text-sm border-2 border-green-800"
                tabindex="-1" role="listbox"
                @onfocusin='_ => _focusInSuggestions = true'
                @onfocusout='_ => _focusInSuggestions = false'>

                @if (CurrentValue?.Length > 0 && Suggestions?.Contains(CurrentValue) == false)
                {
                        <li class="text-gray-900 cursor-default select-none relative py-1 pl-3 pr-9">

                        <div class='flex justify-center space-x-1 p-1 cursor-pointer border-2
                                    @(_newValues.Contains(CurrentValue)? "bg-green-100": "")'
                                @onclick='_ => {
                                    if (!_newValues.Contains(CurrentValue))
                                    {
                                        _newValues.Add(CurrentValue);
                                    }
                                    else
                                    {
                                        _newValues.Remove(CurrentValue);
                                    }
                                }'>
                            <div>Add new value [@CurrentValue]</div>
                            @if (_newValues.Contains(CurrentValue))
                            {
                                <svg xmlns="http://www.w3.org/2000/svg"
                                        class="h-4 w-4 text-red-800 font-bold self-center"
                                        fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" 
                                          stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            }
                        </div>
                    </li>
                }

                @foreach (var suggestion in _matchingSuggestions)
                {
                    <li class="text-gray-900 cursor-default select-none relative py-1 pl-3 pr-9">

                        <div class='flex justify-center space-x-1 p-1 cursor-pointer border-2
                                    @(_selectedValues.Contains(suggestion)? "bg-green-100": "")'
                                @onclick='_ => {
                                    if (!_selectedValues.Contains(suggestion))
                                    {
                                        _selectedValues.Add(suggestion);
                                    }
                                    else
                                    {
                                        _selectedValues.Remove(suggestion);
                                    }
                                }'>
                            <div>@suggestion</div>
                            @if (_selectedValues.Contains(suggestion))
                            {
                                <svg xmlns="http://www.w3.org/2000/svg"
                                        class="h-4 w-4 text-red-800 font-bold self-center"
                                        fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" 
                                          stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            }
                        </div>
                    </li>
                }
            </ul>
        }
    </div>

    <button class="app-btn mt-2" @onclick="SubmitSelectedValues">@SubmitButtonText</button>

</div>

@code {

    [Inject]
    private ILogger<Typeahead> Logger { get; set; }

    [Parameter]
    public ISet<string> Suggestions { get; set; }

    [Parameter]
    public bool ShowSelectedSuggestions { get; set; } = true;

    [Parameter]
    public int MinCharForSuggestions { get; set; } = 2;

    [Parameter]
    public EventCallback<ISet<string>> SuggestionsChanged { get; set; }

    [Parameter]
    public bool AllowOnlySuggestedValues { get; set; } = false;

    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    [Parameter]
    public string SubmitButtonText { get; set; } = "Submit the selected values";

    /// <summary>
    /// Submit callback will return values picked from provided suggestions,
    /// and new values added by user which were not in the suggestions.
    /// - Tuple.Item1 Parameter: Set of values user selected from provided suggestions.
    /// - Tuple.Item2 Parameter: Set of new values added by user.
    /// </summary>
    [Parameter]
    public EventCallback<Tuple<ISet<string>, ISet<string>>> SubmitCallback { get; set; }

    [Parameter]
    public bool ClearSelectionOnSubmit { get; set; } = true;

    private string CurrentValue { get; set; } = string.Empty;

    private bool _focusInInput = false;
    private bool _focusInSuggestions = false;
    private bool _focusInArrow = false;
    private bool _showSuggestions = false;
    private bool ShowSuggestions
    {
        get
        {
            return _showSuggestions && (_focusInInput || _focusInSuggestions || _focusInArrow);
        }

        set
        {
            _showSuggestions = value;
        }
    }

    private string _lastValue = string.Empty;
    private ISet<string> _matchingSuggestions = new HashSet<string>();
    private Timer _debounceTimer = new Timer(400);

    private ISet<string> _selectedValues = new HashSet<string>();
    private ISet<string> _newValues = new HashSet<string>();

    protected override Task OnInitializedAsync()
    {
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += DebounceTimerCb;

        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        if (AllowOnlySuggestedValues && (Suggestions == null || Suggestions.Count == 0))
        {
            Logger.LogInformation("No suggestions in the typeahead component.");
        }

        if (Placeholder == string.Empty && Suggestions != null && Suggestions.Count > 0)
        {
            Placeholder = $"Type to filter from {Suggestions.Count} values..";
        }

        return base.OnParametersSetAsync();
    }

    private void HandleKeyUp(KeyboardEventArgs args)
    {
        _debounceTimer.Stop();
        _debounceTimer.Start();

        if (args.Key == "Enter")
        {
            if (Suggestions?.Contains(CurrentValue) == true)
            {
                _selectedValues.Add(CurrentValue);
            }
            else
            {   
                _newValues.Add(CurrentValue);
            }
        }

        if (CurrentValue.Length > 0)
        {
            ShowSuggestions = true;
        }
        if (args.Key == "Escape" || CurrentValue.Length == 0)
        {
            ShowSuggestions = false;
        }
    }

    private void DebounceTimerCb(object sender, ElapsedEventArgs args)
    {
        if (CurrentValue.Length >= MinCharForSuggestions && CurrentValue != _lastValue)
        {
            _matchingSuggestions.Clear();
            _matchingSuggestions.UnionWith(Suggestions.Where(
                s => s.Contains(CurrentValue, StringComparison.OrdinalIgnoreCase)));
            StateHasChanged();
        }
        else if (CurrentValue != _lastValue)
        {
            _matchingSuggestions.Clear();
            StateHasChanged();
        }

        _lastValue = CurrentValue;
    }

    private void SubmitSelectedValues()
    {
        SubmitCallback.InvokeAsync(Tuple.Create(_selectedValues, _newValues));

        if (ClearSelectionOnSubmit)
        {
            _selectedValues.Clear();
            _newValues.Clear();
            CurrentValue = string.Empty;
        }
    }
}